[{"name": "app.py", "content": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shiny import reactive\nfrom shinywidgets import render_widget, render_plotly\nimport seaborn as sns\n\npenguins = load_penguins()\n\nui.page_opts(title=\"Penguins Data - Kate Huntsman\", fillable=True)\n\n# ADD A SIDEBAR\nwith ui.sidebar(\n    position=\"right\", bg=\"#f8f8f8\", open=\"open\"\n): \n    ui.h2(\"Sidebar\") # sidebar header\n    # Dropdown menu \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Selected Attribute\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Numeric input for Plotly histogram\n    ui.input_numeric(\"plotly_bin_count\", \"Bin Count (Plotly)\", 1, min=1, max=10)\n\n    # Slider input for Seaborn\n    ui.input_slider(\n        \"seaborn_bin_count\", \"Bin Count (Seaborn)\", 5, 50, 25\n    )\n\n    # Checkbox to filter species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select a Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\"],\n        inline=False,\n    )\n\n    # Dividing line\n    ui.hr()\n\n    # Hyperlink to GitHub repo\n    ui.h5(\"GitHub Repo\")\n    ui.a(\n        \"cintel-02-data\",\n        href=\"https://github.com/katehuntsman/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Main content layout\nwith ui.layout_columns():\n    # Display the Plotly Histogram\n    with ui.card():\n        ui.card_header(\"Plotly Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                penguins,\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    # Display Data Table (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        def data_table():\n            return render.DataTable(penguins)\n\n    # Display Data Grid (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(penguins)\n\nwith ui.layout_columns():\n    # Plotly Scatterplot (showing all species)\n        with ui.card(full_screen=True):\n            ui.card_header(\"Plotly Scatterplot: Species\")\n            @render_plotly\n            def plotly_scatterplot():\n                return px.scatter(\n                data_frame=filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                labels={\n                    \"bill_depth_mm\": \"Bill Depth (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                },\n            )\n\n    # Seaborn Histogram (showing all species)\n        with ui.card():\n            ui.card_header(\"Seaborn Histogram\")\n            @render.plot\n            def plot2():\n                ax = sns.histplot(\n                    data=filtered_data(),\n                    x=input.selected_attribute(),\n                    bins=input.seaborn_bin_count(),\n            )\n                ax.set_title(\"Palmer Penguins\")\n                ax.set_xlabel(input.selected_attribute())\n                ax.set_ylabel(\"Number\")\n                return ax\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Reactive function to filter data\n@reactive.Calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    if selected_species:\n        return penguins[penguins['species'].isin(selected_species)]\n    return penguins  # Return all data if no species are selected\n", "type": "text"}]